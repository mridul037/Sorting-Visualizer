{"version":3,"sources":["logo.svg","sortingAlgorithms/getMergeSortAnime.js","components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnime","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","key","onClick","MergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66e2d4ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export function getMergeSortAnime(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","import React from 'react';\r\nimport {getMergeSortAnime} from '../sortingAlgorithms/getMergeSortAnime.js';\r\nimport './SortingVisualizer.css';\r\nconst ANIMATION_SPEED_MS=10;\r\nconst NUMBER_OF_ARRAY_BARS=80;\r\nconst PRIMARY_COLOR='turquoise';\r\nconst SECONDARY_COLOR='red';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n    \tarray:[],\r\n    };\r\n}\r\n\r\ncomponentDidMount(){\r\n\tthis.resetArray();\r\n}\r\n\r\nresetArray(){\r\n\tconst array=[];\r\n\tfor(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\r\n\t\tarray.push(randomVal(5,500));\r\n\t}\r\nthis.setState({array});\r\n}\r\n\r\nMergeSort(){\r\n\r\nconst animations=getMergeSortAnime(this.state.array);\r\nfor(let i=0;i<animations.length;i++){\r\n\tconst arrayBars=document.getElementsByClassName('array-bar');\r\n\tconst isColorChange=i%3!==2;\r\n\tif(isColorChange){\r\n       const[barOneIdx,barTwoIdx]= animations[i];\r\n       const barOneStyle = arrayBars[barOneIdx].style;\r\n       const barTwoStyle = arrayBars[barTwoIdx].style;\r\n       const color=i%3 ===0?SECONDARY_COLOR:PRIMARY_COLOR;\r\n       setTimeout(()=>{\r\n       \tbarOneStyle.backgroundColor=color;\r\n       \tbarTwoStyle.backgroundColor=color;\r\n       },i*ANIMATION_SPEED_MS);\r\n   }else{\r\n   \tsetTimeout(()=>{\r\n   \t\tconst [barOneIdx,newHeight]=animations[i];\r\n   \t\tconst barOneStyle=arrayBars[barOneIdx].style;\r\n   \t\tbarOneStyle.height=`${newHeight}px`;\r\n   \t},i*ANIMATION_SPEED_MS);\r\n   }\r\n\r\n  }\r\n\r\n}\r\n\r\nrender(){\r\n\tconst {array}=this.state;\r\n\r\n   return(\r\n    <div className=\"array-container\">\r\n    {array.map((value,idx)=>(\r\n         <div\r\n         className=\"array-bar\"\r\n         key={idx}\r\n         style={{\r\n         \tbackgroundColor:PRIMARY_COLOR,\r\n         \theight: `${value}px`,\r\n         }}></div>\r\n\r\n        ))}\r\n     \r\n  <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n  <button onClick={() => this.MergeSort()}>Merge sort the array</button>\r\n\r\n    </div>\r\n);\r\n}\r\n\r\n}\r\n\r\nfunction randomVal(min,max){\r\nreturn Math.floor(Math.random()*(max-min+1)+min);\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './components/SortingVisualizer.jsx';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n    <h2>merge sort Visualizer</h2>\n    <h3><p>made by mridul shukla</p></h3>\n     <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}